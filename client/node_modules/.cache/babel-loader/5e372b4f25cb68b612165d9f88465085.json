{"ast":null,"code":"var _jsxFileName = \"/Users/Shared/Code/Complete React Developer in 2020/crown-clothing/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    //OBSERVABLE STREAM STYLE\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection('collections');\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false});\n    // });\n    // PROMISE STYLE\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection('collections');\n    // collectionRef.get().then(snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false});\n    // });\n    // REST STYLE\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections');\n    fetch('https://firestore.googleapis.com/v1/projects/crown-db-12bef/databases/(default)/documents/collections').then(reponse => Response.json()).then(collections => console.log(collections));\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/Shared/Code/Complete React Developer in 2020/crown-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","firestore","convertCollectionsSnapshotToMap","updateCollections","WithSpinner","CollectionsOverview","CollectionPage","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","fetch","then","reponse","Response","json","collections","console","log","render","match","path","mapDispatchToProps","dispatch","collectionsMap"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAGA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,MAAMC,8BAA8B,GAAGH,WAAW,CAACC,mBAAD,CAAlD;AACA,MAAMG,yBAAyB,GAAGJ,WAAW,CAACE,cAAD,CAA7C;;AAEA,MAAMG,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,KADqC,GAC7B;AACNC,MAAAA,OAAO,EAAE;AADH,KAD6B;AAAA,SAKrCC,uBALqC,GAKX,IALW;AAAA;;AAOrCC,EAAAA,iBAAiB,GAAG;AAElB;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA,UAAM;AAAEX,MAAAA;AAAF,QAAwB,KAAKY,KAAnC;AACA,UAAMC,aAAa,GAAGf,SAAS,CAACgB,UAAV,CAAqB,aAArB,CAAtB;AAEAC,IAAAA,KAAK,CAAC,uGAAD,CAAL,CACGC,IADH,CACQC,OAAO,IAAIC,QAAQ,CAACC,IAAT,EADnB,EAEGH,IAFH,CAEQI,WAAW,IAAIC,OAAO,CAACC,GAAR,CAAYF,WAAZ,CAFvB;AAGD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKZ,KAAvB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEgB,KAAK,CAACC,IAAK,EAFtB;AAGE,MAAA,MAAM,EAAEb,KAAK,iBACX,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEH;AAA3C,SAAwDG,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAQE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEY,KAAK,CAACC,IAAK,gBADtB;AAEE,MAAA,MAAM,EAAEb,KAAK,iBACX,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEH;AAAtC,SAAmDG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF;AAiBD;;AA5DoC;;AA+DvC,MAAMc,kBAAkB,GAAGC,QAAQ,KAAK;AACtC3B,EAAAA,iBAAiB,EAAE4B,cAAc,IAC/BD,QAAQ,CAAC3B,iBAAiB,CAAC4B,cAAD,CAAlB;AAF4B,CAAL,CAAnC;;AAKA,eAAe/B,OAAO,CACpB,IADoB,EAEpB6B,kBAFoB,CAAP,CAGbpB,QAHa,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n\nimport {\n  firestore, \n  convertCollectionsSnapshotToMap\n} from '../../firebase/firebase.utils';\n\nimport { updateCollections } from '../../redux/shop/shop.actions';\n\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  state = {\n    loading: true\n  };\n\n  unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n\n    //OBSERVABLE STREAM STYLE\n\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection('collections');\n\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false});\n    // });\n\n\n    // PROMISE STYLE\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection('collections');\n\n    // collectionRef.get().then(snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false});\n    // });\n\n    // REST STYLE\n    const { updateCollections } = this.props;\n    const collectionRef = firestore.collection('collections');\n\n    fetch('https://firestore.googleapis.com/v1/projects/crown-db-12bef/databases/(default)/documents/collections')\n      .then(reponse => Response.json())\n      .then(collections => console.log(collections));\n  }\n\n  render() {\n    const { match } = this.props;\n    const { loading } = this.state;\n    return (\n      <div className='shop-page'>\n        <Route\n          exact\n          path={`${match.path}`}\n          render={props => (\n            <CollectionsOverviewWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n        <Route \n          path={`${match.path}/:collectionId`} \n          render={props => (\n            <CollectionPageWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n      </div> \n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => \n    dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(\n  null, \n  mapDispatchToProps\n)(ShopPage);"]},"metadata":{},"sourceType":"module"}